From b520a35de0f1ad99f30fa3e1e9b02cc2d4832971 Mon Sep 17 00:00:00 2001
From: Dan Streetman <ddstreet@canonical.com>
Date: Mon, 27 Apr 2020 06:38:40 -0400
Subject: [PATCH 1/3] network: Change IgnoreCarrierLoss default to value of
 ConfigureWithoutCarrier
Origin: upstream, https://github.com/systemd/systemd/pull/15619
Bug-Ubuntu: https://bugs.launchpad.net/ubuntu/+source/systemd/+bug/1860926

It doesn't make much sense to have ConfigureWithoutCarrier set, but not
IgnoreCarrierLoss; all the configuration added during initial interface
bring-up will be lost at the first carrier up/down.
---
 man/systemd.network.xml                  | 5 +++--
 src/network/networkd-network-gperf.gperf | 2 +-
 src/network/networkd-network.c           | 5 +++++
 src/network/networkd-network.h           | 2 +-
 4 files changed, 10 insertions(+), 4 deletions(-)

--- a/man/systemd.network.xml
+++ b/man/systemd.network.xml
@@ -778,8 +778,9 @@
       <varlistentry>
         <term><varname>IgnoreCarrierLoss=</varname></term>
         <listitem>
-          <para>A boolean. Allows networkd to retain both the static and dynamic configuration of the
-          interface even if its carrier is lost. Defaults to false.
+          <para>Takes a boolean. Allows networkd to retain both the static and dynamic configuration
+          of the interface even if its carrier is lost. When unset, the value specified with
+          <option>ConfigureWithoutCarrier=</option> is used.
           </para>
         </listitem>
       </varlistentry>
--- a/src/network/networkd-network-gperf.gperf
+++ b/src/network/networkd-network-gperf.gperf
@@ -77,7 +77,7 @@ Network.ProxyARP,
 Network.IPv6ProxyNDPAddress,            config_parse_ipv6_proxy_ndp_address,            0,                             0
 Network.BindCarrier,                    config_parse_strv,                              0,                             offsetof(Network, bind_carrier)
 Network.ConfigureWithoutCarrier,        config_parse_bool,                              0,                             offsetof(Network, configure_without_carrier)
-Network.IgnoreCarrierLoss,              config_parse_bool,                              0,                             offsetof(Network, ignore_carrier_loss)
+Network.IgnoreCarrierLoss,              config_parse_tristate,                          0,                             offsetof(Network, ignore_carrier_loss)
 Address.Address,                        config_parse_address,                           0,                             0
 Address.Peer,                           config_parse_address,                           0,                             0
 Address.Broadcast,                      config_parse_broadcast,                         0,                             0
--- a/src/network/networkd-network.c
+++ b/src/network/networkd-network.c
@@ -266,6 +266,9 @@ static int network_load_one(Manager *man
         network->ipv6_accept_ra_route_table = RT_TABLE_MAIN;
         network->ipv6_mtu = 0;
 
+        network->configure_without_carrier = false;
+        network->ignore_carrier_loss = -1;
+
         dropin_dirname = strjoina(network->name, ".network.d");
 
         r = config_parse_many(filename, network_dirs, dropin_dirname,
@@ -306,6 +309,9 @@ static int network_load_one(Manager *man
         if (network->dhcp_use_gateway < 0)
                 network->dhcp_use_gateway = network->dhcp_use_routes;
 
+        if (network->ignore_carrier_loss < 0)
+                network->ignore_carrier_loss = network->configure_without_carrier;
+
         LIST_PREPEND(networks, manager->networks, network);
 
         r = hashmap_ensure_allocated(&manager->networks_by_name, &string_hash_ops);
--- a/src/network/networkd-network.h
+++ b/src/network/networkd-network.h
@@ -226,7 +226,7 @@ struct Network {
         int arp;
         bool unmanaged;
         bool configure_without_carrier;
-        bool ignore_carrier_loss;
+        int ignore_carrier_loss;
         uint32_t iaid;
         DUID duid;
 
