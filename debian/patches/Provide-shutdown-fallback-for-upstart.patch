From: Martin Pitt <martin.pitt@ubuntu.com>
Date: Wed, 17 Sep 2014 09:31:13 +0200
Subject: Provide shutdown fallback for upstart

For reboot/poweroff/halt/shutdown, if the running init is neither systemd nor
sysvinit, check if we are running under upstart and provide a telinit 0/6
fallback in that case. We call telinit to avoid reimplementing all that logic
with plain D-BUS commands, and to avoid getting out of sync with
previous/future upstart versions.

This makes reboot/halt work when running upstart with systemd-sysv installed
(on switching to systemd or when booting with init=/sbin/upstart).

LP: #1370329
---
 src/systemctl/systemctl.c | 44 ++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 42 insertions(+), 2 deletions(-)

diff --git a/src/systemctl/systemctl.c b/src/systemctl/systemctl.c
index bc56c5f..f70a3c6 100644
--- a/src/systemctl/systemctl.c
+++ b/src/systemctl/systemctl.c
@@ -34,6 +34,7 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <sys/socket.h>
+#include <sys/un.h>
 #include <sys/stat.h>
 #include <stddef.h>
 #include <sys/prctl.h>
@@ -7070,6 +7071,41 @@ static int talk_initctl(void) {
         return 1;
 }
 
+static int talk_upstart(void) {
+        _cleanup_close_ int fd;
+        struct sockaddr_un upstart_addr = {
+                .sun_family = AF_UNIX,
+                .sun_path = "\0/com/ubuntu/upstart\0",
+        };
+        char rl;
+        char telinit_cmd[] = "telinit X";
+
+        /* check if we can connect to upstart; if not, fail */
+        fd = socket(AF_UNIX, SOCK_STREAM|SOCK_CLOEXEC, 0);
+        if (fd < 0) {
+                log_error("socket(AF_UNIX) failed: %m");
+                return -errno;
+        }
+        if (connect(fd, &upstart_addr, sizeof(upstart_addr.sun_family) + 1 +
+                                       strlen(upstart_addr.sun_path + 1)) < 0) {
+                log_debug("cannot connect to upstart");
+                return 0;
+        }
+        log_debug("upstart is running");
+
+        rl = action_to_runlevel();
+        if (!rl)
+                return 0;
+
+        /* invoke telinit with the desired new runlevel */
+        telinit_cmd[8] = rl;
+        if (system(telinit_cmd) != 0) {
+                log_error("failed to run %s for upstart fallback", telinit_cmd);
+                return 0;
+        }
+        return 1;
+}
+
 static int systemctl_main(sd_bus *bus, int argc, char *argv[], int bus_error) {
 
         static const struct {
@@ -7307,11 +7343,15 @@ static int start_with_fallback(sd_bus *bus) {
                         goto done;
         }
 
-        /* Nothing else worked, so let's try
-         * /dev/initctl */
+        /* systemd didn't work (most probably it's not the current init
+         * system), so let's try /dev/initctl for SysV init */
         if (talk_initctl() > 0)
                 goto done;
 
+        /* and now upstart */
+        if (talk_upstart() > 0)
+                goto done;
+
         log_error("Failed to talk to init daemon.");
         return -EIO;
 
