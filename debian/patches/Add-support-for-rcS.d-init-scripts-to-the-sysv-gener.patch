From: Jon Severinsson <jon@severinsson.net>
Date: Sun, 20 Jul 2014 20:00:00 +0200
Subject: Add support for rcS.d init scripts to the sysv-generator

---
 man/systemd.special.xml                   |  9 +++++++++
 src/insserv-generator/insserv-generator.c |  2 +-
 src/shared/special.h                      |  2 +-
 src/sysv-generator/sysv-generator.c       | 31 +++++++++++++++++++++++++++----
 4 files changed, 38 insertions(+), 6 deletions(-)

diff --git a/man/systemd.special.xml b/man/systemd.special.xml
index 863d7f3..ec63e74 100644
--- a/man/systemd.special.xml
+++ b/man/systemd.special.xml
@@ -368,6 +368,15 @@
                                         that have the
                                         <option>auto</option> mount
                                         option set.</para>
+
+                                        <para>systemd automatically
+                                        adds dependencies of type
+                                        <varname>After=</varname> for
+                                        this target unit to all SysV
+                                        init script service units with
+                                        an LSB header referring to the
+                                        <literal>$local_fs</literal>
+                                        facility.</para>
                                 </listitem>
                         </varlistentry>
                         <varlistentry>
diff --git a/src/insserv-generator/insserv-generator.c b/src/insserv-generator/insserv-generator.c
index 97a68e7..a82b3fa 100644
--- a/src/insserv-generator/insserv-generator.c
+++ b/src/insserv-generator/insserv-generator.c
@@ -62,7 +62,7 @@ static int sysv_translate_facility(const char *name, const char *filename, char
 
         static const char * const table[] = {
                 /* LSB defined facilities */
-                "local_fs",             NULL,
+                "local_fs",             SPECIAL_LOCAL_FS_TARGET,
                 "network",              SPECIAL_NETWORK_TARGET,
                 "named",                SPECIAL_NSS_LOOKUP_TARGET,
                 "portmap",              SPECIAL_RPCBIND_TARGET,
diff --git a/src/shared/special.h b/src/shared/special.h
index b045047..fd613c6 100644
--- a/src/shared/special.h
+++ b/src/shared/special.h
@@ -49,7 +49,7 @@
 #define SPECIAL_BUSNAMES_TARGET "busnames.target"
 #define SPECIAL_TIMERS_TARGET "timers.target"
 #define SPECIAL_PATHS_TARGET "paths.target"
-#define SPECIAL_LOCAL_FS_TARGET "local-fs.target"
+#define SPECIAL_LOCAL_FS_TARGET "local-fs.target"         /* LSB's $local_fs */
 #define SPECIAL_LOCAL_FS_PRE_TARGET "local-fs-pre.target"
 #define SPECIAL_INITRD_FS_TARGET "initrd-fs.target"
 #define SPECIAL_INITRD_ROOT_FS_TARGET "initrd-root-fs.target"
diff --git a/src/sysv-generator/sysv-generator.c b/src/sysv-generator/sysv-generator.c
index 0085e26..22f2fdc 100644
--- a/src/sysv-generator/sysv-generator.c
+++ b/src/sysv-generator/sysv-generator.c
@@ -41,6 +41,7 @@
 #include "hashmap.h"
 
 typedef enum RunlevelType {
+        RUNLEVEL_SYSINIT,
         RUNLEVEL_UP,
         RUNLEVEL_DOWN
 } RunlevelType;
@@ -50,6 +51,9 @@ static const struct {
         const char *target;
         const RunlevelType type;
 } rcnd_table[] = {
+        /* Debian SysV runlevel for early boot */
+        { "rcS.d",  SPECIAL_SYSINIT_TARGET,   RUNLEVEL_SYSINIT },
+
         /* Standard SysV runlevels for start-up */
         { "rc1.d",  SPECIAL_RESCUE_TARGET,    RUNLEVEL_UP },
         { "rc2.d",  SPECIAL_RUNLEVEL2_TARGET, RUNLEVEL_UP },
@@ -72,6 +76,7 @@ typedef struct SysvStub {
         char *name;
         char *path;
         char *description;
+        bool sysinit;
         int sysv_start_priority;
         char *pid_file;
         char **before;
@@ -189,6 +194,8 @@ static int generate_unit_file(SysvStub *s) {
                 "Description=%s\n",
                 s->path, s->description);
 
+        if (s->sysinit)
+                fprintf(f, "DefaultDependencies=no\n");
         if (!isempty(before))
                 fprintf(f, "Before=%s\n", before);
         if (!isempty(after))
@@ -202,11 +209,12 @@ static int generate_unit_file(SysvStub *s) {
                 "\n[Service]\n"
                 "Type=forking\n"
                 "Restart=no\n"
-                "TimeoutSec=5min\n"
+                "TimeoutSec=%s\n"
                 "IgnoreSIGPIPE=no\n"
                 "KillMode=process\n"
                 "GuessMainPID=no\n"
                 "RemainAfterExit=%s\n",
+                s->sysinit ? "0" : "5min",
                 yes_no(!s->pid_file));
 
         if (s->pid_file)
@@ -265,16 +273,22 @@ static int sysv_translate_facility(const char *name, const char *filename, char
 
         static const char * const table[] = {
                 /* LSB defined facilities */
-                "local_fs",             NULL,
+                "local_fs",             SPECIAL_LOCAL_FS_TARGET,
                 "network",              SPECIAL_NETWORK_ONLINE_TARGET,
                 "named",                SPECIAL_NSS_LOOKUP_TARGET,
                 "portmap",              SPECIAL_RPCBIND_TARGET,
                 "remote_fs",            SPECIAL_REMOTE_FS_TARGET,
-                "syslog",               NULL,
+                "syslog",               "systemd-journald-dev-log.socket",
                 "time",                 SPECIAL_TIME_SYNC_TARGET,
                 /* Debian defined facilities */
                 "x-display-manager",    "display-manager.service",
                 "mail-transport-agent", "mail-transport-agent.target",
+                /* special rcS init scripts */
+                "cryptdisks",           "cryptsetup.target",
+                "mountall",             SPECIAL_LOCAL_FS_TARGET,
+                "mountnfs",             SPECIAL_REMOTE_FS_TARGET,
+                "checkroot",            "systemd-remount-fs.service",
+                "dbus",                 "dbus.socket",
         };
 
         unsigned i;
@@ -713,6 +727,11 @@ static int fix_order(SysvStub *s, Hashmap *all_services) {
                 if (s->has_lsb && other->has_lsb)
                         continue;
 
+                /* Don't order units between sysinit and regular sysv services,
+                 * they are ordered before and after basic.target anyway. */
+                if (other->sysinit != s->sysinit)
+                        continue;
+
                 if (other->sysv_start_priority < s->sysv_start_priority) {
                         r = strv_extend(&s->after, other->name);
                         if (r < 0)
@@ -890,8 +909,12 @@ static int set_dependencies_from_rcnd(LookupPaths lp, Hashmap *all_services) {
                                 }
 
                                 if (de->d_name[0] == 'S')  {
+                                        if (rcnd_table[i].type == RUNLEVEL_SYSINIT) {
+                                                service->sysinit = true;
+                                                service->sysv_start_priority = a*10 + b;
+                                        }
 
-                                        if (rcnd_table[i].type == RUNLEVEL_UP) {
+                                        if (rcnd_table[i].type == RUNLEVEL_UP && !service->sysinit) {
                                                 service->sysv_start_priority =
                                                         MAX(a*10 + b, service->sysv_start_priority);
                                         }
