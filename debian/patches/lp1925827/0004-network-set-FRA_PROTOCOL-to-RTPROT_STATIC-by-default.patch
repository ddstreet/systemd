From cbd52ca9aca78d04f806600b43a8f658230a43af Mon Sep 17 00:00:00 2001
From: Yu Watanabe <watanabe.yu+github@gmail.com>
Date: Wed, 28 Oct 2020 16:54:51 +0900
Subject: [PATCH 02/12] network: set FRA_PROTOCOL to RTPROT_STATIC by default

[#17477,1/5] cherry-picked from 1e5fd3216a8c73b636ad61e6ebee0c161b6c2063
---
 src/network/networkd-routing-policy-rule.c  | 36 +++++++++++++++------
 src/network/networkd-routing-policy-rule.h  |  3 +-
 test/test-network/systemd-networkd-tests.py |  2 +-
 3 files changed, 30 insertions(+), 11 deletions(-)

--- a/src/network/networkd-routing-policy-rule.c
+++ b/src/network/networkd-routing-policy-rule.c
@@ -56,6 +56,7 @@ static int routing_policy_rule_new(Routi
                 .uid_range.start = UID_INVALID,
                 .uid_range.end = UID_INVALID,
                 .suppress_prefixlen = -1,
+                .protocol = RTPROT_UNSPEC,
         };
 
         *ret = rule;
@@ -88,6 +89,7 @@ static int routing_policy_rule_new_stati
 
         rule->network = network;
         rule->section = TAKE_PTR(n);
+        rule->protocol = RTPROT_STATIC;
 
         r = hashmap_ensure_allocated(&network->rules_by_section, &network_config_hash_ops);
         if (r < 0)
@@ -132,6 +134,7 @@ static int routing_policy_rule_copy(Rout
         dest->table = src->table;
         dest->iif = TAKE_PTR(iif);
         dest->oif = TAKE_PTR(oif);
+        dest->ipproto = src->ipproto;
         dest->protocol = src->protocol;
         dest->sport = src->sport;
         dest->dport = src->dport;
@@ -164,6 +167,7 @@ static void routing_policy_rule_hash_fun
                 siphash24_compress(&rule->table, sizeof(rule->table), state);
                 siphash24_compress(&rule->suppress_prefixlen, sizeof(rule->suppress_prefixlen), state);
 
+                siphash24_compress(&rule->ipproto, sizeof(rule->ipproto), state);
                 siphash24_compress(&rule->protocol, sizeof(rule->protocol), state);
                 siphash24_compress(&rule->sport, sizeof(rule->sport), state);
                 siphash24_compress(&rule->dport, sizeof(rule->dport), state);
@@ -233,6 +237,10 @@ static int routing_policy_rule_compare_f
                 if (r != 0)
                         return r;
 
+                r = CMP(a->ipproto, b->ipproto);
+                if (r != 0)
+                        return r;
+
                 r = CMP(a->protocol, b->protocol);
                 if (r != 0)
                         return r;
@@ -421,10 +429,14 @@ static int routing_policy_rule_set_netli
                         return log_link_error_errno(link, r, "Could not append FRA_OIFNAME attribute: %m");
         }
 
-        r = sd_netlink_message_append_u8(m, FRA_IP_PROTO, rule->protocol);
+        r = sd_netlink_message_append_u8(m, FRA_IP_PROTO, rule->ipproto);
         if (r < 0)
                 return log_link_error_errno(link, r, "Could not append FRA_IP_PROTO attribute: %m");
 
+        r = sd_netlink_message_append_u8(m, FRA_PROTOCOL, rule->protocol);
+        if (r < 0)
+                return log_link_error_errno(link, r, "Could not append FRA_PROTOCOL attribute: %m");
+
         if (rule->sport.start != 0 || rule->sport.end != 0) {
                 r = sd_netlink_message_append_data(m, FRA_SPORT_RANGE, &rule->sport, sizeof(rule->sport));
                 if (r < 0)
@@ -816,12 +828,18 @@ int manager_rtnl_process_rule(sd_netlink
         if (r < 0)
                 return log_oom();
 
-        r = sd_netlink_message_read_u8(message, FRA_IP_PROTO, &tmp->protocol);
+        r = sd_netlink_message_read_u8(message, FRA_IP_PROTO, &tmp->ipproto);
         if (r < 0 && r != -ENODATA) {
                 log_warning_errno(r, "rtnl: could not get FRA_IP_PROTO attribute, ignoring: %m");
                 return 0;
         }
 
+        r = sd_netlink_message_read_u8(message, FRA_PROTOCOL, &tmp->protocol);
+        if (r < 0 && r != -ENODATA) {
+                log_warning_errno(r, "rtnl: could not get FRA_PROTOCOL attribute, ignoring: %m");
+                return 0;
+        }
+
         r = sd_netlink_message_read(message, FRA_SPORT_RANGE, sizeof(tmp->sport), &tmp->sport);
         if (r < 0 && r != -ENODATA) {
                 log_warning_errno(r, "rtnl: could not get FRA_SPORT_RANGE attribute, ignoring: %m");
@@ -1244,7 +1262,7 @@ int config_parse_routing_policy_rule_ip_
                 return 0;
         }
 
-        n->protocol = r;
+        n->ipproto = r;
 
         n = NULL;
 
@@ -1526,10 +1544,10 @@ int routing_policy_serialize_rules(Set *
                         space = true;
                 }
 
-                if (rule->protocol != 0) {
-                        fprintf(f, "%sprotocol=%hhu",
+                if (rule->ipproto != 0) {
+                        fprintf(f, "%sipproto=%hhu",
                                 space ? " " : "",
-                                rule->protocol);
+                                rule->ipproto);
                         space = true;
                 }
 
@@ -1698,10 +1716,10 @@ int routing_policy_load_rules(const char
 
                                 if (free_and_strdup(&rule->oif, b) < 0)
                                         return log_oom();
-                        } else if (streq(a, "protocol")) {
-                                r = safe_atou8(b, &rule->protocol);
+                        } else if (streq(a, "ipproto")) {
+                                r = safe_atou8(b, &rule->ipproto);
                                 if (r < 0) {
-                                        log_warning_errno(r, "Failed to parse RPDB rule protocol, ignoring: %s", b);
+                                        log_warning_errno(r, "Failed to parse RPDB rule IP protocol, ignoring: %s", b);
                                         continue;
                                 }
                         } else if (streq(a, "sourceport")) {
--- a/src/network/networkd-routing-policy-rule.h
+++ b/src/network/networkd-routing-policy-rule.h
@@ -23,7 +23,8 @@ typedef struct RoutingPolicyRule {
         bool invert_rule;
 
         uint8_t tos;
-        uint8_t protocol;
+        uint8_t ipproto; /* FRA_IP_PROTO */
+        uint8_t protocol; /* FRA_PROTOCOL */
 
         uint32_t table;
         uint32_t fwmark;
--- a/test/test-network/systemd-networkd-tests.py
+++ b/test/test-network/systemd-networkd-tests.py
@@ -3304,7 +3304,7 @@ class NetworkdBridgeTests(unittest.TestC
 
         output = check_output('ip rule list table 100')
         print(output)
-        self.assertEqual(output, '0:	from all to 8.8.8.8 lookup 100')
+        self.assertIn('0:	from all to 8.8.8.8 lookup 100', output)
 
 class NetworkdLLDPTests(unittest.TestCase, Utilities):
     links = ['veth99']
