Index: systemd/Makefile.am
===================================================================
--- systemd.orig/Makefile.am	2010-08-28 19:19:31.753845673 +0200
+++ systemd/Makefile.am	2010-08-28 19:20:28.890842137 +0200
@@ -854,6 +854,8 @@
 		$(DESTDIR)$(pkgsysconfdir)/system/graphical.target.wants \
 		$(DESTDIR)$(pkgsysconfdir)/session \
 		$(DESTDIR)$(sysconfdir)/xdg/systemd
+	$(MKDIR_P) -m 0755 $(DESTDIR)/cgroup || \
+		echo "Don't forget to create /cgroup! Couldn't create it for you, continuing anyway."
 	( cd $(DESTDIR)$(sysconfdir)/xdg/systemd/ && \
 		rm -f session && \
 		$(LN_S) $(pkgsysconfdir)/session session )
Index: systemd/man/sd_booted.xml
===================================================================
--- systemd.orig/man/sd_booted.xml	2010-08-28 19:20:10.477861383 +0200
+++ systemd/man/sd_booted.xml	2010-08-28 19:21:46.137880580 +0200
@@ -85,11 +85,11 @@
                 implementation.</para>
 
                 <para>Internally, this function checks whether the
-                <filename>/sys/fs/cgroup/systemd</filename> virtual file
+                <filename>/cgroup/systemd</filename> virtual file
                 system is mounted, by comparing the st_dev value of
                 the <function>stat()</function> data of
-                <filename>/sys/fs/cgroup</filename> and
-                <filename>/sys/fs/cgroup/systemd</filename>.</para>
+                <filename>/cgroup</filename> and
+                <filename>/cgroup/systemd</filename>.</para>
 
                 <para>For details about the algorithm check the
                 liberally licensed reference implementation sources:
Index: systemd/man/systemd-cgls.xml
===================================================================
--- systemd.orig/man/systemd-cgls.xml	2010-08-28 19:20:10.493844008 +0200
+++ systemd/man/systemd-cgls.xml	2010-08-28 19:21:46.137880580 +0200
@@ -65,7 +65,7 @@
                 file paths or are assumed in the systemd control group
                 hierarchy. If no argument is specified and the current
                 working directory is beneath the control group mount
-                point <filename>/sys/fs/cgroup</filename> shows the contents
+                point <filename>/cgroup</filename> shows the contents
                 of the control group the working directory refers
                 to. Otherwise the full systemd control group hierarchy
                 is shown.</para>
Index: systemd/man/systemd.xml
===================================================================
--- systemd.orig/man/systemd.xml	2010-08-28 19:20:10.513844186 +0200
+++ systemd/man/systemd.xml	2010-08-28 19:21:46.137880580 +0200
@@ -388,7 +388,7 @@
                 track of processes. Control group information is
                 maintained in the kernel, and is accessible via the
                 file system hierarchy (beneath
-                <filename>/sys/fs/cgroup/systemd/</filename>), or in tools
+                <filename>/cgroup/systemd/</filename>), or in tools
                 such as
                 <citerefentry><refentrytitle>ps</refentrytitle><manvolnum>1</manvolnum></citerefentry>
                 (<command>ps xawf -eo pid,user,cgroup,args</command>
Index: systemd/src/cgls.c
===================================================================
--- systemd.orig/src/cgls.c	2010-08-28 19:20:10.541847692 +0200
+++ systemd/src/cgls.c	2010-08-28 19:21:46.137880580 +0200
@@ -103,7 +103,7 @@
                         goto finish;
                 }
 
-                if (path_startswith(p, "/sys/fs/cgroup")) {
+                if (path_startswith(p, "/cgroup")) {
                         printf("Working Directory %s:\n", p);
                         r = show_cgroup_by_path(p, NULL, 0);
                 } else
Index: systemd/src/mount-setup.c
===================================================================
--- systemd.orig/src/mount-setup.c	2010-08-28 19:20:10.577847819 +0200
+++ systemd/src/mount-setup.c	2010-08-28 19:21:46.141855599 +0200
@@ -42,13 +42,13 @@
 } MountPoint;
 
 static const MountPoint mount_table[] = {
-        { "proc",     "/proc",                  "proc",     NULL,                MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
-        { "sysfs",    "/sys",                   "sysfs",    NULL,                MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
-        { "devtmpfs", "/dev",                   "devtmpfs", "mode=755",          MS_NOSUID,                    true },
-        { "tmpfs",    "/dev/shm",               "tmpfs",    "mode=1777",         MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
-        { "devpts",   "/dev/pts",               "devpts",   NULL,                MS_NOSUID|MS_NOEXEC,          false },
-        { "tmpfs",    "/sys/fs/cgroup",         "tmpfs",    "mode=755",          MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
-        { "cgroup",   "/sys/fs/cgroup/systemd", "cgroup",   "none,name=systemd", MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
+        { "proc",     "/proc",           "proc",     NULL,                MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
+        { "sysfs",    "/sys",            "sysfs",    NULL,                MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
+        { "devtmpfs", "/dev",            "devtmpfs", "mode=755",          MS_NOSUID,                    true },
+        { "tmpfs",    "/dev/shm",        "tmpfs",    "mode=1777",         MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
+        { "devpts",   "/dev/pts",        "devpts",   NULL,                MS_NOSUID|MS_NOEXEC,          false },
+        { "tmpfs",    "/cgroup",         "tmpfs",    "mode=755",          MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
+        { "cgroup",   "/cgroup/systemd", "cgroup",   "none,name=systemd", MS_NOSUID|MS_NOEXEC|MS_NODEV, true },
 };
 
 /* These are API file systems that might be mounted by other software,
@@ -75,7 +75,7 @@
                 if (path_equal(path, ignore_paths[i]))
                         return true;
 
-        return path_startswith(path, "/sys/fs/cgroup/");
+        return path_startswith(path, "/cgroup/");
 }
 
 static int mount_one(const MountPoint *p) {
@@ -138,7 +138,7 @@
                         goto finish;
                 }
 
-                if (asprintf(&where, "/sys/fs/cgroup/%s", controller) < 0) {
+                if (asprintf(&where, "/cgroup/%s", controller) < 0) {
                         free(controller);
                         r = -ENOMEM;
                         goto finish;
Index: systemd/src/sd-daemon.c
===================================================================
--- systemd.orig/src/sd-daemon.c	2010-08-28 19:20:23.125855274 +0200
+++ systemd/src/sd-daemon.c	2010-08-28 19:21:46.141855599 +0200
@@ -424,10 +424,10 @@
         /* We simply test whether the systemd cgroup hierarchy is
          * mounted */
 
-        if (lstat("/sys/fs/cgroup", &a) < 0)
+        if (lstat("/cgroup", &a) < 0)
                 return 0;
 
-        if (lstat("/sys/fs/cgroup/systemd", &b) < 0)
+        if (lstat("/cgroup/systemd", &b) < 0)
                 return 0;
 
         return a.st_dev != b.st_dev;
Index: systemd/src/test-cgroup.c
===================================================================
--- systemd.orig/src/test-cgroup.c	2010-08-28 19:20:23.149845696 +0200
+++ systemd/src/test-cgroup.c	2010-08-28 19:21:46.141855599 +0200
@@ -53,7 +53,7 @@
         free(path);
 
         assert_se(cg_get_path(SYSTEMD_CGROUP_CONTROLLER, "/test-b/test-d", NULL, &path) == 0);
-        assert_se(path_equal(path, "/sys/fs/cgroup/systemd/test-b/test-d"));
+        assert_se(path_equal(path, "/cgroup/systemd/test-b/test-d"));
         free(path);
 
         assert_se(cg_is_empty(SYSTEMD_CGROUP_CONTROLLER, "/test-a", false) > 0);
diff --git a/src/cgroup-util.c b/src/cgroup-util.c
index 6abb6b5..07e4e64 100644
--- a/src/cgroup-util.c
+++ b/src/cgroup-util.c
@@ -481,7 +481,7 @@ int cg_get_path(const char *controller, const char *path, const char *suffix, ch
         else
                 p = controller;
 
-        if (asprintf(&mp, "/sys/fs/cgroup/%s", p) < 0)
+        if (asprintf(&mp, "/cgroup/%s", p) < 0)
                 return -ENOMEM;
 
         if ((r = path_is_mount_point(mp)) <= 0) {
@@ -927,7 +927,7 @@ int cg_fix_path(const char *path, char **result) {
 
         /* First check if it already is a filesystem path */
         if (path_is_absolute(path) &&
-            path_startswith(path, "/sys/fs/cgroup") &&
+            path_startswith(path, "/cgroup") &&
             access(path, F_OK) >= 0) {
 
                 if (!(t = strdup(path)))
