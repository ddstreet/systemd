Index: systemd/src/libudev/libudev-hwdb.c
===================================================================
--- systemd.orig/src/libudev/libudev-hwdb.c	2013-08-27 10:49:32.349556246 +0200
+++ systemd/src/libudev/libudev-hwdb.c	2013-08-27 10:49:32.337556245 +0200
@@ -140,9 +140,13 @@
 }
 
 static int hwdb_add_property(struct udev_hwdb *hwdb, const char *key, const char *value) {
-        /* TODO: add sub-matches (+) against DMI data */
+        /*
+         * Silently ignore all properties which do not start with a
+         * space; future extensions might use additional prefixes.
+         */
         if (key[0] != ' ')
                 return 0;
+
         if (udev_list_entry_add(&hwdb->properties_list, key+1, value) == NULL)
                 return -ENOMEM;
         return 0;
@@ -300,11 +304,11 @@
         }
 
         log_debug("=== trie on-disk ===\n");
-        log_debug("tool version:          %llu", (unsigned long long)le64toh(hwdb->head->tool_version));
-        log_debug("file size:        %8llu bytes\n", (unsigned long long)hwdb->st.st_size);
-        log_debug("header size       %8llu bytes\n", (unsigned long long)le64toh(hwdb->head->header_size));
-        log_debug("strings           %8llu bytes\n", (unsigned long long)le64toh(hwdb->head->strings_len));
-        log_debug("nodes             %8llu bytes\n", (unsigned long long)le64toh(hwdb->head->nodes_len));
+        log_debug("tool version:          %"PRIu64, le64toh(hwdb->head->tool_version));
+        log_debug("file size:        %8llu bytes\n", (unsigned long long) hwdb->st.st_size);
+        log_debug("header size       %8"PRIu64" bytes\n", le64toh(hwdb->head->header_size));
+        log_debug("strings           %8"PRIu64" bytes\n", le64toh(hwdb->head->strings_len));
+        log_debug("nodes             %8"PRIu64" bytes\n", le64toh(hwdb->head->nodes_len));
         return hwdb;
 }
 
Index: systemd/src/udev/udev-builtin-hwdb.c
===================================================================
--- systemd.orig/src/udev/udev-builtin-hwdb.c	2013-08-27 10:49:32.349556246 +0200
+++ systemd/src/udev/udev-builtin-hwdb.c	2013-08-27 10:49:32.341556245 +0200
@@ -23,20 +23,37 @@
 #include <inttypes.h>
 #include <ctype.h>
 #include <stdlib.h>
+#include <fnmatch.h>
 #include <getopt.h>
 
 #include "udev.h"
 
 static struct udev_hwdb *hwdb;
 
-int udev_builtin_hwdb_lookup(struct udev_device *dev, const char *modalias, bool test) {
+int udev_builtin_hwdb_lookup(struct udev_device *dev,
+                             const char *prefix, const char *modalias,
+                             const char *filter, bool test) {
+        struct udev_list_entry *list;
         struct udev_list_entry *entry;
         int n = 0;
 
         if (!hwdb)
                 return -ENOENT;
 
-        udev_list_entry_foreach(entry, udev_hwdb_get_properties_list_entry(hwdb, modalias, 0)) {
+        if (prefix) {
+                _cleanup_free_ const char *lookup;
+
+                lookup = strjoin(prefix, modalias, NULL);
+                if (!lookup)
+                        return -ENOMEM;
+                list = udev_hwdb_get_properties_list_entry(hwdb, lookup, 0);
+        } else
+                list = udev_hwdb_get_properties_list_entry(hwdb, modalias, 0);
+
+        udev_list_entry_foreach(entry, list) {
+                if (filter && fnmatch(filter, udev_list_entry_get_name(entry), FNM_NOESCAPE) != 0)
+                        continue;
+
                 if (udev_builtin_add_property(dev, test,
                                               udev_list_entry_get_name(entry),
                                               udev_list_entry_get_value(entry)) < 0)
@@ -66,12 +83,14 @@
         return s;
 }
 
-static int udev_builtin_hwdb_search(struct udev_device *dev, const char *subsystem, bool test) {
+static int udev_builtin_hwdb_search(struct udev_device *dev, struct udev_device *srcdev,
+                                    const char *subsystem, const char *prefix,
+                                    const char *filter, bool test) {
         struct udev_device *d;
         char s[16];
         int n = 0;
 
-        for (d = dev; d; d = udev_device_get_parent(d)) {
+        for (d = srcdev; d; d = udev_device_get_parent(d)) {
                 const char *dsubsys;
                 const char *modalias = NULL;
 
@@ -83,16 +102,16 @@
                 if (subsystem && !streq(dsubsys, subsystem))
                         continue;
 
-                /* the usb_device does not have a modalias, compose one */
-                if (streq(dsubsys, "usb"))
-                        modalias = modalias_usb(dev, s, sizeof(s));
+                modalias = udev_device_get_property_value(d, "MODALIAS");
 
-                if (!modalias)
-                        modalias = udev_device_get_property_value(d, "MODALIAS");
+                /* the usb_device does not have a modalias, compose one */
+                if (!modalias && streq(dsubsys, "usb"))
+                        modalias = modalias_usb(d, s, sizeof(s));
 
                 if (!modalias)
                         continue;
-                n = udev_builtin_hwdb_lookup(dev, modalias, test);
+
+                n = udev_builtin_hwdb_lookup(dev, prefix, modalias, filter, test);
                 if (n > 0)
                         break;
         }
@@ -102,10 +121,17 @@
 
 static int builtin_hwdb(struct udev_device *dev, int argc, char *argv[], bool test) {
         static const struct option options[] = {
+                { "filter", required_argument, NULL, 'f' },
+                { "device", required_argument, NULL, 'd' },
                 { "subsystem", required_argument, NULL, 's' },
+                { "lookup-prefix", required_argument, NULL, 'p' },
                 {}
         };
+        const char *filter = NULL;
+        const char *device = NULL;
         const char *subsystem = NULL;
+        const char *prefix = NULL;
+        struct udev_device *srcdev;
 
         if (!hwdb)
                 return EXIT_FAILURE;
@@ -113,20 +139,47 @@
         for (;;) {
                 int option;
 
-                option = getopt_long(argc, argv, "s", options, NULL);
+                option = getopt_long(argc, argv, "f:d:s:p:", options, NULL);
                 if (option == -1)
                         break;
 
                 switch (option) {
+                case 'f':
+                        filter = optarg;
+                        break;
+
+                case 'd':
+                        device = optarg;
+                        break;
+
                 case 's':
                         subsystem = optarg;
                         break;
+
+                case 'p':
+                        prefix = optarg;
+                        break;
                 }
         }
 
-        if (udev_builtin_hwdb_search(dev, subsystem, test) < 0)
+        /* query a specific key given as argument */
+        if (argv[optind]) {
+                if (udev_builtin_hwdb_lookup(dev, prefix, argv[optind], filter, test) > 0)
+                        return EXIT_SUCCESS;
                 return EXIT_FAILURE;
-        return EXIT_SUCCESS;
+        }
+
+        /* read data from another device than the device we will store the data */
+        if (device) {
+                srcdev = udev_device_new_from_device_id(udev_device_get_udev(dev), device);
+                if (!srcdev)
+                        return EXIT_FAILURE;
+        } else
+                srcdev = dev;
+
+        if (udev_builtin_hwdb_search(dev, srcdev, subsystem, prefix, filter, test) > 0)
+                return EXIT_SUCCESS;
+        return EXIT_FAILURE;
 }
 
 /* called at udev startup and reload */
Index: systemd/src/udev/udevadm-hwdb.c
===================================================================
--- systemd.orig/src/udev/udevadm-hwdb.c	2013-08-27 10:49:32.349556246 +0200
+++ systemd/src/udev/udevadm-hwdb.c	2013-08-27 10:49:32.341556245 +0200
@@ -21,6 +21,7 @@
 #include <unistd.h>
 #include <getopt.h>
 #include <string.h>
+#include <ctype.h>
 
 #include "util.h"
 #include "strbuf.h"
@@ -302,8 +303,10 @@
                 int64_t child_off;
 
                 child_off = trie_store_nodes(trie, node->children[i].child);
-                if (child_off < 0)
+                if (child_off < 0) {
+                        free(children);
                         return child_off;
+                }
                 children[i].c = node->children[i].c;
                 children[i].child_off = htole64(child_off);
         }
@@ -402,66 +405,122 @@
         return err;
 }
 
-static int import_file(struct trie *trie, const char *filename) {
+static int insert_data(struct trie *trie, struct udev_list *match_list,
+                       char *line, const char *filename) {
+        char *value;
+        struct udev_list_entry *entry;
+
+        value = strchr(line, '=');
+        if (!value) {
+                log_error("Error, key/value pair expected but got '%s' in '%s':\n", line, filename);
+                return -EINVAL;
+        }
+
+        value[0] = '\0';
+        value++;
+
+        if (line[0] == '\0' || value[0] == '\0') {
+                log_error("Error, empty key or value '%s' in '%s':\n", line, filename);
+                return -EINVAL;
+        }
+
+        udev_list_entry_foreach(entry, udev_list_get_entry(match_list))
+                trie_insert(trie, trie->root, udev_list_entry_get_name(entry), line, value);
+
+        return 0;
+}
+
+static int import_file(struct udev *udev, struct trie *trie, const char *filename) {
+        enum {
+                HW_MATCH,
+                HW_DATA,
+                HW_NONE,
+        } state = HW_NONE;
         FILE *f;
         char line[LINE_MAX];
-        char match[LINE_MAX];
-        char cond[LINE_MAX];
+        struct udev_list match_list;
+
+        udev_list_init(udev, &match_list, false);
 
         f = fopen(filename, "re");
         if (f == NULL)
                 return -errno;
 
-        match[0] = '\0';
-        cond[0] = '\0';
         while (fgets(line, sizeof(line), f)) {
                 size_t len;
+                char *pos;
 
+                /* comment line */
                 if (line[0] == '#')
                         continue;
 
-                /* new line, new record */
-                if (line[0] == '\n') {
-                        match[0] = '\0';
-                        cond[0] = '\0';
-                        continue;
-                }
+                /* strip trailing comment */
+                pos = strchr(line, '#');
+                if (pos)
+                        pos[0] = '\0';
 
-                /* remove newline */
+                /* strip trailing whitespace */
                 len = strlen(line);
-                if (len < 2)
-                        continue;
-                line[len-1] = '\0';
+                while (len > 0 && isspace(line[len-1]))
+                        len--;
+                line[len] = '\0';
+
+                switch (state) {
+                case HW_NONE:
+                        if (len == 0)
+                                break;
+
+                        if (line[0] == ' ') {
+                                log_error("Error, MATCH expected but got '%s' in '%s':\n", line, filename);
+                                break;
+                        }
 
-                /* start of new record */
-                if (match[0] == '\0') {
-                        strcpy(match, line);
-                        cond[0] = '\0';
-                        continue;
-                }
+                        /* start of record, first match */
+                        state = HW_MATCH;
+                        udev_list_entry_add(&match_list, line, NULL);
+                        break;
 
-                if (line[0] == '+') {
-                        strcpy(cond, line);
-                        continue;
-                }
+                case HW_MATCH:
+                        if (len == 0) {
+                                log_error("Error, DATA expected but got empty line in '%s':\n", filename);
+                                state = HW_NONE;
+                                udev_list_cleanup(&match_list);
+                                break;
+                        }
 
-                /* TODO: support +; skip the entire record until we support it */
-                if (cond[0] != '\0')
-                        continue;
+                        /* another match */
+                        if (line[0] != ' ') {
+                                udev_list_entry_add(&match_list, line, NULL);
+                                break;
+                        }
 
-                /* value lines */
-                if (line[0] == ' ') {
-                        char *value;
+                        /* first data */
+                        state = HW_DATA;
+                        insert_data(trie, &match_list, line, filename);
+                        break;
 
-                        value = strchr(line, '=');
-                        if (!value)
-                                continue;
-                        value[0] = '\0';
-                        value++;
-                        trie_insert(trie, trie->root, match, line, value);
-                }
+                case HW_DATA:
+                        /* end of record */
+                        if (len == 0) {
+                                state = HW_NONE;
+                                udev_list_cleanup(&match_list);
+                                break;
+                        }
+
+                        if (line[0] != ' ') {
+                                log_error("Error, DATA expected but got '%s' in '%s':\n", line, filename);
+                                state = HW_NONE;
+                                udev_list_cleanup(&match_list);
+                                break;
+                        }
+
+                        insert_data(trie, &match_list, line, filename);
+                        break;
+                };
         }
+
         fclose(f);
+        udev_list_cleanup(&match_list);
         return 0;
 }
 
@@ -549,7 +608,7 @@
                 }
                 STRV_FOREACH(f, files) {
                         log_debug("reading file '%s'", *f);
-                        import_file(trie, *f);
+                        import_file(udev, trie, *f);
                 }
                 strv_free(files);
 
Index: systemd/src/udev/udev.h
===================================================================
--- systemd.orig/src/udev/udev.h	2013-08-27 10:49:32.349556246 +0200
+++ systemd/src/udev/udev.h	2013-08-27 10:49:32.341556245 +0200
@@ -190,7 +190,8 @@
 void udev_builtin_list(struct udev *udev);
 bool udev_builtin_validate(struct udev *udev);
 int udev_builtin_add_property(struct udev_device *dev, bool test, const char *key, const char *val);
-int udev_builtin_hwdb_lookup(struct udev_device *dev, const char *modalias, bool test);
+int udev_builtin_hwdb_lookup(struct udev_device *dev, const char *prefix, const char *modalias,
+                             const char *filter, bool test);
 
 /* udev logging */
 void udev_main_log(struct udev *udev, int priority,
Index: systemd/src/udev/udev-builtin-net_id.c
===================================================================
--- systemd.orig/src/udev/udev-builtin-net_id.c	2013-04-08 17:26:34.317113774 +0200
+++ systemd/src/udev/udev-builtin-net_id.c	2013-08-27 10:50:02.873557723 +0200
@@ -386,7 +386,7 @@
         snprintf(str, sizeof(str), "OUI:%02X%02X%02X%02X%02X%02X",
                  names->mac[0], names->mac[1], names->mac[2],
                  names->mac[3], names->mac[4], names->mac[5]);
-        udev_builtin_hwdb_lookup(dev, str, test);
+        udev_builtin_hwdb_lookup(dev, NULL, str, NULL, test);
         return 0;
 }
 
