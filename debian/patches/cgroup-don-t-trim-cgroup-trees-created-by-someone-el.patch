From: Michal Sekletar <msekleta@redhat.com>
Date: Fri, 19 Sep 2014 17:14:10 +0200
Subject: cgroup: don't trim cgroup trees created by someone else

In cases when there is a cgroup tree in a controller hierarchy which was
not created by us, but it looks like it was (i.e. cgroup path is the
same as the one in systemd's named hierarchy) we shouldn't delete it.

Origin: http://lists.freedesktop.org/archives/systemd-devel/2014-September/023276.html
Bug-Debian: https://bugs.debian.org/777601
---
 src/basic/cgroup-util.c | 2 --
 src/core/cgroup.c       | 2 +-
 2 files changed, 1 insertion(+), 3 deletions(-)

diff --git a/src/basic/cgroup-util.c b/src/basic/cgroup-util.c
index 6b3162a..8b49701 100644
--- a/src/basic/cgroup-util.c
+++ b/src/basic/cgroup-util.c
@@ -1744,8 +1744,6 @@ int cg_create_everywhere(CGroupControllerMask supported, CGroupControllerMask ma
         NULSTR_FOREACH(n, mask_names) {
                 if (mask & bit)
                         cg_create(n, path);
-                else if (supported & bit)
-                        cg_trim(n, path, true);
 
                 bit <<= 1;
         }
diff --git a/src/core/cgroup.c b/src/core/cgroup.c
index 6474e08..c7533fe 100644
--- a/src/core/cgroup.c
+++ b/src/core/cgroup.c
@@ -840,7 +840,7 @@ void unit_destroy_cgroup_if_empty(Unit *u) {
         if (!u->cgroup_path)
                 return;
 
-        r = cg_trim_everywhere(u->manager->cgroup_supported, u->cgroup_path, !unit_has_name(u, SPECIAL_ROOT_SLICE));
+        r = cg_trim_everywhere(u->cgroup_realized_mask, u->cgroup_path, !unit_has_name(u, SPECIAL_ROOT_SLICE));
         if (r < 0) {
                 log_debug_errno(r, "Failed to destroy cgroup %s: %m", u->cgroup_path);
                 return;
